spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/orderService
spring.datasource.username=yassine
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update
logging.level.root=DEBUG



server.port=8082
spring.application.name=order-service


#properties for spring boot actuator
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

#resillience4j props
#
#This configuration tells Resilience4j to register a health indicator for the inventory circuit breaker. \
#  This means that the health indicator will be able to report the current state of \
#  the circuit breaker (open, closed, half-open, etc.) to Spring Boot. \
#  This can be useful for monitoring the health of your application and for implementing failover strategies.
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
#
#This configuration sets the size of the event consumer buffer for the inventory circuit breaker.\
# The event consumer buffer is used to store events that are generated by the circuit breaker,\
#  \ such as circuit breaker state changes and failure events. The size of the buffer should be large enough \
#to accommodate the expected rate of events, but not so large that it consumes too much memory.
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10


#This configuration tells Resilience4j to use a count-based sliding\
#  \ window to track the failure rate of the inventory circuit breaker. \
#  A count-based sliding window tracks the number of failures that have \
#  occurred within a certain number of calls. If the failure rate exceeds a \
#  configured threshold, the circuit breaker will trip and enter the open state.
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED

#
#This configuration sets the size of the sliding window for the inventory circuit breaker.\
#  \ The sliding window is used to track the failure rate of the circuit breaker\
#  \ over a period of time. The size of the sliding window should be large\
#  \ enough to capture a representative sample of the failure rate, but not so large that it makes the \
#  circuit breaker too slow to react to changes in the failure rate.
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5


#
#This configuration sets the failure rate threshold for the inventory circuit breaker.\
#  \ If the failure rate exceeds this threshold, the circuit breaker will trip and enter the open state. \
#  The failure rate threshold should be set to a value that balances the need to protect\
#  \ your application from cascading failures with the need to maintain availability.
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50

resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s

resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3

resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

#configuring timeout
resilience4j.timelimiter.instances.inventory.timeout-duration=3s


#Resilience4J Retry Properties
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s




management.tracing.sampling.probability=1

#Properties for kafka
spring.kafka.bootstrap-servers=localhost:9092

spring.kafka.template.default-topic=notificationTopic
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.ordermicroservice.event.OrderPlacedEvent
